import GlimpseOfLean.Library.Basic


namespace Compute

/- MoP 1.3.11 question 1. You will likely use `rw` and `ring` -/
example {x y : ‚Ñù} (h1 : x = 3) (h2 : y = 4 * x - 3) :
  y = 9 := by {
  sorry
}

/- MoP 1.3.11 question 3. You will likely use `apply?`, `rw`, and `rfl`.
   Any time you are in doubt, use `apply?` -/
example {x y : ‚Ñ§} (h1 : x - 3 * y = 5) (h2 : y = 3) :
  x = 14 := by {
  sorry
}


/- 1.4.11 question 6. Make liberal use of apply? for this question.
You will also need the fact that (a-b)^2 ‚â• 0 -/
example (a b : ‚Ñù)
    : a ^ 2 + b ^ 2 ‚â• 2 * a * b := by {
  sorry
}

end Compute


/- TODO define namespace ACT here so our definitions of Preorder and PartialOrder don't conflict with Mathlib's!! -/


/- A preorder is a reflexive, transitive relation `‚â§` with `a < b` defined in the obvious way.
   Note that this is _not_ a partial order because it is not necessarily symmetric.
   Everything in a preorder need not be comparable either, because we don't have a property saying ‚àÄ x y, ùë• ‚â§ ùë¶ ‚à® ùë¶ ‚â§ ùë• -/
class Preorder (Œ± : Type) extends LE Œ±, LT Œ± where
  le_refl : ‚àÄ a : Œ±, a ‚â§ a
  le_trans : ‚àÄ a b c : Œ±, a ‚â§ b ‚Üí b ‚â§ c ‚Üí a ‚â§ c
  lt := fun a b => a ‚â§ b ‚àß ¬¨b ‚â§ a
  lt_iff_le_not_le : ‚àÄ a b : Œ±, a < b ‚Üî a ‚â§ b ‚àß ¬¨b ‚â§ a := by intros; rfl

/- Preorders need not be symmetric, but ACT defines notation for when a‚â§b and b‚â§a b/c this situation is still special -/
notation a "‚âÖ" b => a ‚â§ b ‚àß b ‚â§ a

/- A partial order is a reflexive, transitive, antisymmetric relation `‚â§`. -/
class PartialOrder (Œ± : Type) extends Preorder Œ± where
  le_antisymm : ‚àÄ a b : Œ±, a ‚â§ b ‚Üí b ‚â§ a ‚Üí a = b

section Ch1

/- A set P is a discrete preorder if ‚àÄ a,b ‚àà P, a ‚â§ b ‚Üî a = b
 - A discrete preorder is a preorder: -/
def DiscretePreorder (Œ± : Type) : Preorder Œ± where
  le := fun a b => a = b
  le_refl := by sorry
  le_trans := by {
    sorry
  }

/- A set P is a codiscrete preorder if ‚àÄ a,b ‚àà A, a ‚â§ b
 - A codiscrete preorder is a preorder: -/
def CodiscretePreorder (Œ± : Type) : Preorder Œ± where
  le := fun a b => true
  le_refl := by intro a; rfl
  le_trans := by intro a b c hab hbc; rfl

/- Lean 4's Bool is a Preorder (and it comes packaged with a definition for ‚â§ already) -/
instance : Preorder (Bool) where
  le_refl := by intro a; rfl
  le_trans := by intro a b c hab hbc; apply ge_trans hbc hab


/- Until the end of this section, A,B,C are sets whose elements might be comparable with ‚â§ and < -/
variable [Preorder X]
variable {A B C : Set X}

/- TODO Fill out the definition of a monotone function -/
def monotone (f : A ‚Üí B) := ‚àÄ x, x

/- Prove the identity function is monotone -/
example (I : A ‚Üí A) (hI : ‚àÄ x, I x = x) : monotone I := by {
  sorry
}

/- Prove that a function composition of two monotone functions is a monotone function -/
theorem monotone_composition {g : A ‚Üí B} {f : B ‚Üí C} (hf : monotone f) (hg : monotone g) :
  monotone (f ‚àò g) := by {
  sorry
}

/- We will continue to build up to meets, joins, and Galois connections -/
def lowerBounds (s : Set X) : Set X := { x | ‚àÄ a, a ‚àà s ‚Üí x ‚â§ a }
def upperBounds (s : Set X) : Set X := { x | ‚àÄ a, a ‚àà s ‚Üí a ‚â§ x }

-- a meet is a greatest lower bound is an infimum
def isMeet (s : Set X) (x‚ÇÄ : X) := ‚àÄ x, x ‚àà lowerBounds s ‚Üî x ‚â§ x‚ÇÄ

-- a join is a least upper bound is a supremum
def isJoin (s : Set X) (x‚ÇÄ : X) := ‚àÄ x, x ‚àà upperBounds s ‚Üî x‚ÇÄ ‚â§ x

/- Any two meets are isomorphic -/
example {x y : X} (h1 : isMeet A x) (h2 : isMeet A y) : x ‚âÖ y := by {
  constructor
  ¬∑ apply (h2 x).1
    apply (h1 x).2
    apply Preorder.le_refl
  ¬∑ apply (h1 y).1
    apply (h2 y).2
    apply Preorder.le_refl
}

end Ch1